comment_block      = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment_singleline = { "//" ~ (!NEWLINE ~ ANY)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ (comment_block | comment_singleline) }

alpha        =  { 'a'..'z' | 'A'..'Z' }
digit        =  { '0'..'9' }
hexadecimal  = _{ '0'..'9' | 'A'..'F' | 'a'..'f' }
alphanumeric =  { (alpha | digit) }

ident = @{ !digit ~ (alphanumeric | "_")+ }

integer     = ${ ("-" | "+")? ~ hexadecimal+ }
hex_integer = ${ ("-" | "+")? ~ "0x" ~ hexadecimal+ }
float       = ${ ("-" | "+")? ~ digit+ ~ "." ~ digit+ ~ ("e" ~ ("-" | "+")? ~ digit+)? }
number      =  { (hex_integer | float | integer) }

string       = ${ "\"" ~ string_inner ~ "\"" }
string_inner = _{ char* }
char         =  {
    unicode | escape_sequence
}
unicode = { !("\"" | "\\") ~ ANY }
escape_sequence = {
  | "\\" ~ ("\"" | "\'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0")
  | "\\" ~ ("u" ~ "{" ~ ASCII_HEX_DIGIT* ~ "}")
  | "\\" ~ ("x" ~ ASCII_HEX_DIGIT{2})
}

boolean = { "true" | "false" }

// cohae: Tuple/named struct enum variants are already handled by other struct rules
enum_variant    = { ident }
struct          = { ident ~ "{" ~ fields ~ "}" }
map_jsonlike    = { "{" ~ fields_jsonlike ~ "}" }
tuple_struct    = { ident ~ "(" ~ tuple_elements ~ ")" }
tuple           = { "(" ~ tuple_elements ~ ")" }
bitflags_struct = { ident ~ "(" ~ bitflags_elements ~ ")" }

fields            = { field ~ ("," ~ field)* ~ ","? }
fields_jsonlike   = { field_jsonlike ~ ("," ~ field_jsonlike)* ~ ","? }
field             = { ident ~ ":" ~ value }
field_jsonlike    = { string ~ ":" ~ value }
tuple_elements    = { value? ~ ("," ~ value)* ~ ","? }
bitflags_elements = { value? ~ ("|" ~ value)* ~ ","? }

array = { "[" ~ value? ~ ("," ~ value)* ~ ","? ~ "]" }

assignment = { ident ~ "=" ~ value }

value = _{ boolean | struct | map_jsonlike | assignment | tuple_struct | bitflags_struct | number | string | enum_variant | array | tuple }

main = _{
    SOI ~ (value | WHITESPACE)* ~ EOI
}
